prontera,155,172,4	script	WarpManager	828,{
set $@eventmnpc$, "[^3333FFCovenRO Warper^000000]";

//------------------GAME MASTER--------------------------------------------------------------
if (getgmlevel() >= 20)
{
Le_menu:
	mes $@eventmnpc$;
	mes "Current state: ^FF0000 "+$state+"^000000.";
	switch(select("Set gvgoff/pvpoff/skilloff:Event:Warp:Cancel event"))
	{
		case 1:
			next;
			if($state >= 1) {
			mes $@eventmnpc$;
			mes "An event is still running!";
			close;}
			else {
			callfunc "gvgpvpskilloff";
			mes $@eventmnpc$;
			mes "^ff0000@gvgoff, @pvpoff, @skilloff has been implemented on all event maps.^000000";
			close;
			}
		case 2:
			callsub openevent;
			break;
		case 3:
			callsub gm_warp;
			break;
		case 4:
			next;
			if($state != 0)
			{
				set $state,0;
				mes $@eventmnpc$;
				mes "Ok it is now turned ^FF0000OFF^000000.";
				//announce "The event is canceled.",bc_all;
				delwaitingroom;
				waitingroom "Event Warper.",0;
				close;
			}
			else
			{
				mes $@eventmnpc$;
				mes "Ok it is now turned ^FF0000OFF^000000.";
				delwaitingroom;
				waitingroom "Event Warper.",0;
				close;
			}
	}
	close;
	
gm_warp:
	switch($state)
	{
		case 0:
			next;
			mes $@eventmnpc$;
			mes "There's no active event.";
			break;	
		case 1:
			warp "quiz_01",230,368;
			break;
		case 2:
			warp "guild_vs2",45,49;
			break;
		case 3:
			warp "poring_c01",104,107;
			break;
		case 4:
			warp "quiz_02",350,368;
			break;
		case 5:
			warp "guild_vs1-1",0,0;
			break;
		case 6:
			warp "quiz_02",55,84;	 //dice
			break;
		case 7:
			warp "quiz_01",322,368;	 //disguise
			break;
		case 8:
			warp "quiz_01",41,378;
			break;
	}
	return;

openevent:
			next;
			mes $@eventmnpc$;
			mes "Choose an event.";
			
			switch(select("Lucky Box:Disguise"))
			{
				case 1:
					next;
					set $state,6;
					announce "Lucky Box event is open.",bc_all;
					break;
				case 2:
					set $state,7;
					set $gm_event_num, $gm_event_num + 1;
					announce "Disguise event is open.",bc_all;
					enablenpc "Disguise Event";
					disablenpc "Auto Disguise Event";
					break;
			}
			mes $@eventmnpc$;
			mes "Do you want to warp now?";
			switch(select("Main menu:Warp"))
			{
				case 1:
					next;
					goto Le_menu;
					break;
				case 2:
					goto gm_warp;
					break;
			}
			end;
OnWhisperGlobal:

	switch($state)
	{
		case 0:
			mes $@eventmnpc$;
			mes "There's no active event.";
			delwaitingroom;
			waitingroom "Event warper.",0;
			close;	
		case 6:
			initnpctimer;
			announce "Lucky Box is closing in 30seconds.",bc_all;
			end;
			OnLBTimer24000:
			announce "Ok 5 seconds more.",bc_all;
			end;
			OnLBTimer25000:
			announce "4.",bc_all;
			end;
			OnLBTimer26000:
			announce "3.",bc_all;
			end;
			OnLBTimer27000:
			announce "2.",bc_all;
			end;
			OnLBTimer28000:
			announce "1.",bc_all;
			end;
			OnLBTimer29000:
			stopnpctimer;
			callsub reset_state;
			break;
		case 7:
			initnpctimer;
			announce "Disguise Event is closing in 30seconds.",bc_all;
			end;
			OnDISTimer24000:
			announce "Ok 5 seconds more.",bc_all;
			end;
			OnDISTimer25000:
			announce "4.",bc_all;
			end;
			OnDISTimer26000:
			announce "3.",bc_all;
			end;
			OnDISTimer27000:
			announce "2.",bc_all;
			end;
			OnDISTimer28000:
			announce "1.",bc_all;
			end;
			OnDISTimer29000:
			stopnpctimer;
			callsub reset_state;
			break;
	}
	end;

reset_state:
	delwaitingroom;
	waitingroom "Event warper.",0;
	set $state,0;
}


//----------------------Normal Player---------------------------------
else
{
	switch($state)
	{
		case 0:
			
			mes $@eventmnpc$;
			mes "Sorry. No events at this time.";
			emotion 17;
			close;
		case 1: //rfyl
			//Added mount check similar to dodgeball. Prevents players mounting pecopecos to enter.
			emotion 21;
			if (checkriding())
			{
				mes $@eventmnpc$;
				mes "No riding is allowed! Sorry "+strcharinfo(0)+" but you can't join this event!";
				close;
			}
			else {
			mes $@eventmnpc$;
			mes "RFYL is active!";
			mes "Do you want to go to the event place?";
			switch(select("Yes, please.:No, thanks."))
			{
				case 1:
					sc_end SC_ALL;
					percentheal 100,100;
					warp "quiz_01",230,368;
					break;
				case 2:
					close;
			}
			break;
			}
		case 2:
			emotion 21;
			mes $@eventmnpc$;
			mes "LMS is active!";
			mes "Do you want to go to the event place?";
			switch(select("Yes, please.:No, thanks."))
			{
				case 1:
					sc_end SC_ALL;
					percentheal 100,100;
					warp "guild_vs2",45,49;
					break;
				case 2:
					close;
			}
			break;
		case 3:
			callsub dodge_warp;
			break;
		case 4:
			emotion 21;
			mes $@eventmnpc$;
			mes "TOF is active!";
			mes "Do you want to go to the event place?";
			switch(select("Yes, please.:No, thanks."))
			{
				case 1:
					sc_end SC_ALL;
					warp "quiz_02",350,368;
					break;
				case 2:
					close;
			}
			break;
		case 5:
			emotion 21;
			mes $@eventmnpc$;
			mes "MVP Event is active!";
			mes "Do you want to go to the event place?";
			switch(select("Yes, please.:No, thanks."))
			{
				case 1:
					sc_end SC_ALL;
					percentheal 100,100;
					warp "guild_vs1-1",0,0;
					break;
				case 2:
					close;
			}
			break;
		case 6:
			emotion 21;
			mes $@eventmnpc$;
			mes "Lucky Box is active!";
			mes "Do you want to go to the event place?";
			switch(select("Yes, please.:No, thanks."))
			{
				case 1:
					sc_end SC_ALL;
					warp "quiz_02",55,84;
					break;
				case 2:
					close;
			}
			break;
		case 7:
			emotion 21;
			mes $@eventmnpc$;
			mes "Disguise is active!";
			mes "Do you want to go to the event place?";
			switch(select("Yes, please.:No, thanks."))
			{
				case 1:
					switch(rand(1,2))
					{
					case 1:
						sc_end SC_ALL;
						warp "quiz_01",313,368;
						break;
					case 2:
						sc_end SC_ALL;
						warp "quiz_01",330,368;
						break;

					}
				case 2:
					close;
			}
			break;
		case 8:
			emotion 21;
			mes $@eventmnpc$;
			mes "Zombie vs Novice is active!";
			mes "Do you want to go to the event place?";
			switch(select("Yes, please.:No, thanks."))
			{
				case 1:
					
					if(readparam(bVit) > 9) goto L_ClassLevel;
					if(readparam(bDex) > 9) goto L_ClassLevel;
					if(readparam(bAgi) > 9) goto L_ClassLevel;
					if(readparam(bStr) > 9) goto L_ClassLevel;
					if(readparam(bInt) > 9) goto L_ClassLevel;
					if(readparam(bLuk) > 9) goto L_ClassLevel;
					if (BaseLevel > 1) goto L_ClassLevel;
					if (class > 0) goto L_ClassLevel;
					if (class == 0) goto L_Event;
 				L_Event:
					set $@zvn_playercount, $@zvn_playercount+1;
					sc_end SC_ALL;
					percentheal 100,100;
					warp "quiz_01",42,369;
					end;
				 L_ClassLevel:
					next;
					mes $@eventmnpc$;
					mes "Please double check if you are Novice with base level 1 and less than 9 stats.";
					close;
				case 2:
					close;
			}
			break;
		default:
			break;
	}
	
}
dodge_warp:
	mes $@eventmnpc$;
	mes "Hello. How may I help you?";
	next;
	switch(select("Join Dodgeball","Event Information")){
		case 1:
			if (checkriding())
			{
				mes $@eventmnpc$;
				mes "No mounts allowed! Sorry "+strcharinfo(0)+" but you can't join this event!";
				close;
			}
			else {
			sc_end sc_all;
			percentheal 100,100;
			warp "poring_c01",104,107;
			end;
			}
			
		case 2:
			mes $@eventmnpc$;
			mes "Gameplay:";
			mes "Exploding dodgeballs will be spawned randomly on the map. It is a one-hit KO to the players that get hit with the explosion.";
			mes " ";
			mes "How To Win:";
			mes "Run away and don't get hit! Last one standing wins~";
			close;
	}
OnInit:
			delwaitingroom;
			waitingroom "Event Warper.",0;
			set $state,0;
			end;

}

/////////////////////////////Fabre event////////////////////////////////////////////
//pvp_n_1-2,0,0,0	script	Fabre Trainer	-1,{
//
//}
//------------------------------------------------------------------------------------------------------------------------------------
//---------------------------------------------------Lucky Box (Dice)-----------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------
quiz_02,55,85,4	script	Lucky Box Event Manager	402,{
	if (getgmlevel()<2) goto OUT;
	mes "[Lucky Box Event Manager]";
	mes "What do you want to do?";
	switch(select("Select Number")){
	
	case 1:
		next;
		mes "[Lucky Box Event Manager]";
		mes "Select Number.";	
		switch(select("1","2","3","4")){
			case 1:
				next;
				mes "[Lucky Box Event Manager]";
				mes "1?";
				next;
				mes "[Lucky Box Event Manager]";
				mes "Sure?";
				next;
				switch(select("Yes","No")){
				case 1:
					areawarp "quiz_02",33,73,41,52, "prontera",155,166;	//#1
					areawarp "quiz_02",45,73,53,52, "quiz_02",55,84;	//#2
					areawarp "quiz_02",57,73,65,52, "quiz_02",55,84;	//#3
					areawarp "quiz_02",69,73,77,52, "quiz_02",55,84;	//#4
					close;
				case 2:
					close;
				}
			case 2:
				next;
				mes "[Lucky Box Event Manager]";
				mes "2?";
				next;
				mes "[Lucky Box Event Manager]";
				mes "Sure?";
				next;
				switch(select("Yes","No")){
				case 1:
					areawarp "quiz_02",33,73,41,52, "quiz_02",55,84;	//#1
					areawarp "quiz_02",45,73,53,52, "prontera",155,166;	//#2
					areawarp "quiz_02",57,73,65,52, "quiz_02",55,84;	//#3
					areawarp "quiz_02",69,73,77,52, "quiz_02",55,84;	//#4
					close;
				case 2:
					close;
				}
			case 3:
				next;
				mes "[Lucky Box Event Manager]";
				mes "3?";
				next;
				mes "[Lucky Box Event Manager]";
				mes "Sure?";
				next;
				switch(select("Yes","No")){
				case 1:
					areawarp "quiz_02",33,73,41,52, "quiz_02",55,84;	//#1
					areawarp "quiz_02",45,73,53,52, "quiz_02",55,84;	//#2
					areawarp "quiz_02",57,73,65,52, "prontera",155,166;	//#3
					areawarp "quiz_02",69,73,77,52, "quiz_02",55,84;	//#4
					close;
				case 2:
					close;
				}
			case 4:
				next;
				mes "[Lucky Box Event Manager]";
				mes "4?";
				next;
				mes "[Lucky Box Event Manager]";
				mes "Sure?";
				next;
				switch(select("Yes","No")){
				case 1:
					areawarp "quiz_02",33,73,41,52, "quiz_02",55,84;	//#1
					areawarp "quiz_02",45,73,53,52, "quiz_02",55,84;	//#2
					areawarp "quiz_02",57,73,65,52, "quiz_02",55,84;	//#3
					areawarp "quiz_02",69,73,77,52, "prontera",155,166;	//#4
					close;
				case 2:
					close;
				}
		}
	}
OUT:
	end;
}


function	script	gvgpvpskilloff	{
	pvpoff "guild_vs1-1";
	pvpoff "guild_vs2";
	pvpoff "quiz_01";
	pvpoff "quiz_02";
	pvpoff "06guild_01";
	pvpoff "pvp_n_1-2";
	gvgoff "guild_vs1-1";
	gvgoff "guild_vs2";
	gvgoff "quiz_01";
	gvgoff "quiz_02";
	gvgoff "06guild_01";
	gvgoff "pvp_n_1-2";
	setmapflag "guild_vs2",mf_noskill;
	setmapflag "quiz_01",mf_noskill;
	setmapflag "quiz_02",mf_noskill;
	setmapflag "06guild_01",mf_noskill;
	setmapflag "pvp_n_1-2",mf_noskill;
	return;
}

quiz_02,37,80,0	warp	warp1	0,0,quiz_02,37,73
quiz_02,49,80,0	warp	warp2	0,0,quiz_02,49,73
quiz_02,61,80,0	warp	warp3	0,0,quiz_02,61,73
quiz_02,73,80,0	warp	warp4	0,0,quiz_02,73,73
quiz_02	mapflag	noskill
quiz_02	mapflag	nosave	SavePoint
quiz_02	mapflag	noteleport
quiz_02	mapflag	nowarp
quiz_02	mapflag	nomemo
quiz_02	mapflag	nodrop
quiz_02	mapflag	notrade
quiz_02	mapflag	noreturn
quiz_01	mapflag	noskill
quiz_01	mapflag	nosave	SavePoint
quiz_01	mapflag	noteleport
quiz_01	mapflag	nowarp
quiz_01	mapflag	nomemo
quiz_01	mapflag	nodrop
quiz_01	mapflag	notrade
quiz_01	mapflag	noreturn
quiz_01	mapflag	restricted	6
//06guild_01	mapflag	restricted	5
06guild_01	mapflag	pvp_noparty
06guild_01	mapflag	pvp_noguild
06guild_01	mapflag	noskill
06guild_01	mapflag	nosave	SavePoint
06guild_01	mapflag	noteleport
06guild_01	mapflag	nowarp
06guild_01	mapflag	nomemo
06guild_01	mapflag	noreturn
06guild_01	mapflag	nodrop
06guild_01	mapflag	notrade
guild_vs1	mapflag	nosave	SavePoint
guild_vs1	mapflag	noteleport
guild_vs1	mapflag	nowarp
guild_vs1	mapflag	nomemo
guild_vs1	mapflag	noskill
guild_vs1	mapflag	noreturn
guild_vs5	mapflag	nowarp
//prontera	mapflag	novending
pvp_n_1-2	mapflag	noskill
pvp_n_1-2	mapflag	nosave	SavePoint
pvp_n_1-2	mapflag	noteleport
pvp_n_1-2	mapflag	nowarp
pvp_n_1-2	mapflag	nomemo
pvp_n_1-2	mapflag	noreturn
guild_vs5	mapflag	nosave	SavePoint
